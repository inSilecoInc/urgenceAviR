[{"path":"http://insileco.io/urgenceAviR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 urgenceAviR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://insileco.io/urgenceAviR/articles/assessThreat.html","id":"load-area-of-interest","dir":"Articles","previous_headings":"","what":"Load area of interest","title":"Assess environmental threaths","text":"","code":"area <- sf::st_read(system.file(\"exdata/threat_example.kml\", package = \"urgenceAviR\"), quiet = TRUE) |>   sf::st_transform(crs = sf::st_crs(32198))  mapview::mapviewOptions(fgb = FALSE) mapview::mapview(area) extent <- terra::ext(area)"},{"path":"http://insileco.io/urgenceAviR/articles/assessThreat.html","id":"load-species-reference-backbone","dir":"Articles","previous_headings":"","what":"Load species reference backbone","title":"Assess environmental threaths","text":"","code":"species_ref <- urgenceAviR::get_species_codes(drop_subspecies = TRUE) #> ℹ Load 688 species from species reference table"},{"path":"http://insileco.io/urgenceAviR/articles/assessThreat.html","id":"scf-data","dir":"Articles","previous_headings":"","what":"SCF Data","title":"Assess environmental threaths","text":"Load SCF occurences data transform sf object Get occurences area","code":"scf_occs <- urgenceAviR::load_all_datasets() |>   dplyr::filter(!is.na(latitude) & !is.na(longitude) & !is.na(abondance) & !is.na(date)) |>   sf::st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = sf::st_crs(4326)) |>   sf::st_transform(scf_occs, crs = sf::st_crs(32198)) #>  #> ── Loading all datasets ────────────────────────────────────────── #>  #> ── Canards de mer ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationCanardsDeMer.csv #> ℹ Applying transformation on 645 rows #> ℹ Load 688 species from species reference table #> ✔ Returning 645 rows #>  #> ── Eider Hiver ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationEiderHiver.csv #> ℹ Applying transformation on 10986 rows #> ✔ Returning 10986 rows #>  #> ── Garrot ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationGarrot.csv #> ℹ Applying transformation on 30185 rows #> ℹ Load 688 species from species reference table #> ✔ Returning 30185 rows #>  #> ── Macreuse ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationMacreuses.csv #> ℹ Applying transformation on 4732 rows #> ℹ Load 688 species from species reference table #> ✔ Returning 4732 rows #>  #> ── Oies ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationOieDesNeigesPrintemps.csv #> ℹ Applying transformation on 905 rows #> ℹ Load 688 species from species reference table #> ✔ Returning 905 rows #>  #> ── Sauvagine Fleuve ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationSauvagineFleuve.csv #> ℹ Applying transformation on 16349 rows #> ℹ Load 688 species from species reference table #> ✔ Returning 16349 rows #>  #> ── BIOMQ ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/consultationBIOMQ.xlsx #> ✖ Failed to load dataset: biomq. Error: unable to load shared object '/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/readxl/libs/readxl.so':   dlopen(/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/readxl/libs/readxl.so, 0x0006): Symbol not found: _iconv   Referenced from: <F9E865B0-FD67-38F7-AB3F-1B57646A6434> /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/readxl/libs/readxl.so   Expected in:     <867ACB81-DFB5-371B-B515-516A8450D634> /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libR.dylib #>  #> ── SOMEC ── #>  #> ℹ Starting integration procedure on /Users/steve/inSileco Dropbox/Steve Vissault/UrgenceAviR/ConsultationSOMEC.csv #> ✖ Failed to load dataset: somec. Error: Missing required columns in dataset: #>  #> ── Atlantic Colonies ── #>  #> ℹ Starting integration procedure on #> ✖ Failed to load dataset: load_atlantic_colonies. Error: invalid 'file' argument #>  #> ── Combining datasets ──────────────────────────────────────────── #> ✔ Successfully combined datasets sscf_occs_area <- sf::st_intersection(scf_occs, area) #> Warning: attribute variables are assumed to be spatially constant throughout #> all geometries mapview::mapview(sscf_occs_area)"},{"path":"http://insileco.io/urgenceAviR/articles/assessThreat.html","id":"create-one-kernel-by-season-and-group-of-species","dir":"Articles","previous_headings":"","what":"Create one kernel by season and group of species","title":"Assess environmental threaths","text":"Split season Subset ducks group Rasterize abundances species group 95th quantile Plot raster values Run kernel season based observation points Reference: https://r-spatial.org/book/11-PointPattern.html https://www.paulamoraga.com/book-spatial/intensity-estimation.html","code":"sscf_occs_area <- sscf_occs_area |> dplyr::mutate(   season = dplyr::case_when(     lubridate::month(date) %in% 4:7 ~ \"04050607\",     lubridate::month(date) %in% 8:11 ~ \"08091011\",     lubridate::month(date) %in% c(12,1,2,3) ~ \"12010203\"   ) ) ducks <- dplyr::filter(sscf_occs_area, code_id %in% (species_ref |>   dplyr::filter(stringr::str_detect(group, \"duck\")) |>   dplyr::pull(code_id) |>   unique())) |> dplyr::distinct() library(stars) # Create reference grid grid <- terra::rast(area, resolution = 200) q95 <- terra::rasterize(terra::vect(ducks), grid, field = \"abondance\", fun = quantile, probs = c(0.95), by = \"season\") tmap::tmap_mode(\"view\") #> ℹ tmap mode set to \"view\". tmap::tm_basemap(tmap::providers$CartoDB.DarkMatter) +   tmap::tm_shape(log10(q95)) +   tmap::tm_raster() +   tmap::tm_facets(ncol = 2) +   tmap::tm_layout(title = c(\"Printemps-Été\", \"Été-Automne\", \"Hiver\"))  #> [v3->v4] `tm_layout()`: use `tm_title()` instead of #> `tm_layout(title = )` #> [scale] tm_raster:() the data variable assigned to 'col' contains positive and negative values, so midpoint is set to 0. Set 'midpoint = NA' in 'fill.scale = tm_scale_intervals(<HERE>)' to use all visual values (e.g. colors) #>  #> [scale] tm_raster:() the data variable assigned to 'col' contains positive and negative values, so midpoint is set to 0. Set 'midpoint = NA' in 'fill.scale = tm_scale_intervals(<HERE>)' to use all visual values (e.g. colors) #>  #> [scale] tm_raster:() the data variable assigned to 'col' contains positive and negative values, so midpoint is set to 0. Set 'midpoint = NA' in 'fill.scale = tm_scale_intervals(<HERE>)' to use all visual values (e.g. colors) #> Error in if (title != \"\") {: the condition has length > 1 duck_seasons <- ducks |>   dplyr::group_split(season)  densities_rs <- duck_seasons |> purrr::map(\\(df){   df_ppp <- spatstat.geom::as.ppp(df)   density <- spatstat.explore::density.ppp(df_ppp, sigma = 1)    # Go back to terra::rast   density <- terra::rast(density)   terra::crs(density) <- \"epsg:32198\"    # Resample on based grid   terra::resample(density, grid, method = \"near\") })  # Remove negative densities and mask values densities_rs <- purrr::map(densities_rs, \\(r){   # r <- terra::clamp(r, lower = 0, upper = Inf, values = FALSE)   r <- terra::mask(r, area)   r }) |>   terra::rast() |>   setNames(c(\"Printemps-Été\", \"Été-Automne\", \"Hiver\"))  tmap::tmap_mode(\"view\") #> ℹ tmap mode set to \"view\". tmap::tm_basemap(tmap::providers$CartoDB.DarkMatter) +   tmap::tm_shape(densities_rs) +   tmap::tm_raster(title = \"Kernel density estimation\", palette = viridis::viridis(12)) +   tmap::tm_facets(ncol = 2, free.scales = TRUE) +   tmap::tm_layout(title = c(\"Printemps-Été\", \"Été-Automne\", \"Hiver\")) #> [v3->v4] `tm_tm_raster()`: migrate the argument(s) related to the #> scale of the visual variable `col` namely 'palette' (rename to #> 'values') to col.scale = tm_scale(<HERE>). #> [v3->v4] `tm_raster()`: migrate the argument(s) related to the #> legend of the visual variable `col` namely 'title' to 'col.legend #> = tm_legend(<HERE>)' #> tm_facets(): the argument free.scales is deprecated. Specify this via the layer functions (e.g. fill.free in tm_polygons) #>  #> [v3->v4] `tm_layout()`: use `tm_title()` instead of #> `tm_layout(title = )` #> Error in if (title != \"\") {: the condition has length > 1"},{"path":"http://insileco.io/urgenceAviR/articles/assessThreat.html","id":"ebirds","dir":"Articles","previous_headings":"","what":"eBirds","title":"Assess environmental threaths","text":"","code":"ebird <- get_ebird(   path = \"/home/steve/Documents/UrgenceAviR_EmeRgencyApp/eBirdQC_juin2024_Extraction2024-11-04/eBird.gdb\",   species = unique(species_ref$nom_scient), var_species = \"SCIENTIFIC_NAME\", extent = extent ) #> Error: [vect] file does not exist: /home/steve/Documents/UrgenceAviR_EmeRgencyApp/eBirdQC_juin2024_Extraction2024-11-04/eBirdQC_juin2024_Extraction2024-11-04.gdb"},{"path":"http://insileco.io/urgenceAviR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clara Casabona. Contributor. Matthieu Beaumont. Author, maintainer, copyright holder. Steve Vissault. Author.","code":""},{"path":"http://insileco.io/urgenceAviR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beaumont M, Vissault S (2025). urgenceAviR: Integrate birds abundances data. R package version 0.0.1, http://insileco.io/urgenceAviR/.","code":"@Manual{,   title = {urgenceAviR: Integrate birds abundances data},   author = {Matthieu Beaumont and Steve Vissault},   year = {2025},   note = {R package version 0.0.1},   url = {http://insileco.io/urgenceAviR/}, }"},{"path":"http://insileco.io/urgenceAviR/index.html","id":"urgenceavir","dir":"","previous_headings":"","what":"Integrate birds abundances data","title":"Integrate birds abundances data","text":"package designed gather bird surveys integrate . newly created database used assess environmental threat levels.","code":""},{"path":"http://insileco.io/urgenceAviR/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Integrate birds abundances data","text":"","code":"# Install devtools if not already installed install.packages(\"devtools\")  # Install urgenceAviR from GitHub devtools::install_github(\"insileco/urgenceAviR\")"},{"path":"http://insileco.io/urgenceAviR/reference/get_ebird.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve eBird Data — get_ebird","title":"Retrieve eBird Data — get_ebird","text":"Filters retrieves data eBird GeoDatabase file (.gdb) using SQL query.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_ebird.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve eBird Data — get_ebird","text":"","code":"get_ebird(   path = NULL,   species = NULL,   year = NULL,   month = NULL,   extent = NULL,   ... )"},{"path":"http://insileco.io/urgenceAviR/reference/get_ebird.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve eBird Data — get_ebird","text":"path Character string specifying file path eBird GeoDatabase file (.gdb). species Character vector species names filter (e.g., \"Snow Goose\"). NULL, query filter species. year Integer vector years filter (e.g., 2012:2014). NULL, query filter year. month Integer vector months filter (e.g., 4:5). NULL, query filter year . extent sf terra spatial object defining spatial extent filter data. NULL, query apply spatial filtering. ... Additional arguments passed SQL query construction function (compose_query). allows customization query conditions.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_ebird.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve eBird Data — get_ebird","text":"SpatVector object containing filtered eBird data.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_ebird.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve eBird Data — get_ebird","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Retrieve data for Snow Goose in April and May of 2012-2014 get_ebird(   path = \"path/to/ebird.gdb\",   species = \"Snow Goose\",   year = 2012:2014,   month = 4:5 )} # }"},{"path":"http://insileco.io/urgenceAviR/reference/get_species_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and Process Species Codes — get_species_codes","title":"Clean and Process Species Codes — get_species_codes","text":"Functions clean process species codes DBF file, join metadata, optionally drop subspecies.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and Process Species Codes — get_species_codes","text":"","code":"get_species_codes(   species_path = external_files$species_codes$path,   metadata_path = external_files$species_metadata$path,   drop_subspecies = TRUE )"},{"path":"http://insileco.io/urgenceAviR/reference/get_species_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and Process Species Codes — get_species_codes","text":"species_path Path DBF file containing species codes. metadata_path Path CSV file containing metadata. drop_subspecies Logical, whether drop subspecies resulting data frame (default: TRUE).","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and Process Species Codes — get_species_codes","text":"cleaned data frame species codes optional subspecies filtered .","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and Process Species Codes — get_species_codes","text":"Clean Process Species Codes file contains functions clean process species codes DBF file, join metadata, optionally drop subspecies output.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and Process Species Codes — get_species_codes","text":"","code":"if (FALSE) { # \\dontrun{ species_ref <- get_species_codes(  species_path = \"data/CodesEspeces.dbf\",   metadata_path = \"data/metadata_species.csv\",   drop_subspecies = TRUE ) } # }"},{"path":"http://insileco.io/urgenceAviR/reference/get_species_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Get species rank — get_species_rank","title":"Get species rank — get_species_rank","text":"Get species rank based scientific name","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get species rank — get_species_rank","text":"","code":"get_species_rank(scientific_name)"},{"path":"http://insileco.io/urgenceAviR/reference/get_species_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get species rank — get_species_rank","text":"scientific_name scientific name species ranked","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get species rank — get_species_rank","text":"character string indicating rank: \"genre\", \"subspecies\", \"species\".","code":""},{"path":"http://insileco.io/urgenceAviR/reference/get_species_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get species rank — get_species_rank","text":"","code":"get_species_rank(\"Aquila chrysaetos\") #> [1] \"species\""},{"path":"http://insileco.io/urgenceAviR/reference/load_all_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process all datasets — load_all_datasets","title":"Load and process all datasets — load_all_datasets","text":"function sequentially calls load_* dataset processing functions combines outputs single data.frame list data.frames.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_all_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process all datasets — load_all_datasets","text":"","code":"load_all_datasets(combine = TRUE)"},{"path":"http://insileco.io/urgenceAviR/reference/load_all_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and process all datasets — load_all_datasets","text":"combine Logical, TRUE (default), combines datasets single data.frame. FALSE, returns named list individual data.frames.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_all_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process all datasets — load_all_datasets","text":"combined data.frame list data.frames containing processed datasets.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_all_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process all datasets — load_all_datasets","text":"","code":"if (FALSE) { # \\dontrun{ all_data <- load_all_datasets() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_atlantic_colonies.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Atlantic Colonies dataset — load_atlantic_colonies","title":"Load and process the Atlantic Colonies dataset — load_atlantic_colonies","text":"function loads processes \"Atlantic Colonies\" dataset predefined spatial data source. validates file, applies transformations, integrates coordinates census data.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_atlantic_colonies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Atlantic Colonies dataset — load_atlantic_colonies","text":"","code":"load_atlantic_colonies()"},{"path":"http://insileco.io/urgenceAviR/reference/load_atlantic_colonies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Atlantic Colonies dataset — load_atlantic_colonies","text":"processed data.frame standardized columns integrated spatial data.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_atlantic_colonies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Atlantic Colonies dataset — load_atlantic_colonies","text":"","code":"if (FALSE) { # \\dontrun{ processed_colonies <- load_atlantic_colonies() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_biomq.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the BIOMQ dataset — load_biomq","title":"Load and process the BIOMQ dataset — load_biomq","text":"function loads processes \"BIOMQ\" dataset predefined external Excel file. validates file columns, applies transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_biomq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the BIOMQ dataset — load_biomq","text":"","code":"load_biomq()"},{"path":"http://insileco.io/urgenceAviR/reference/load_biomq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the BIOMQ dataset — load_biomq","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_biomq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the BIOMQ dataset — load_biomq","text":"","code":"if (FALSE) { # \\dontrun{ processed_biomq <- load_biomq() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_canards.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Canards de Mer canards — load_canards","title":"Load and process the Canards de Mer canards — load_canards","text":"function loads processes \"Canards de Mer\" canards predefined external source. standardizes column names, performs transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_canards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Canards de Mer canards — load_canards","text":"","code":"load_canards()"},{"path":"http://insileco.io/urgenceAviR/reference/load_canards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Canards de Mer canards — load_canards","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_canards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Canards de Mer canards — load_canards","text":"","code":"if (FALSE) { # \\dontrun{ processed_canards <- load_canards() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_eider_hiver.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Eider Hiver dataset — load_eider_hiver","title":"Load and process the Eider Hiver dataset — load_eider_hiver","text":"function loads processes \"Eider Hiver\" dataset predefined external source. validates file columns, applies transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_eider_hiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Eider Hiver dataset — load_eider_hiver","text":"","code":"load_eider_hiver()"},{"path":"http://insileco.io/urgenceAviR/reference/load_eider_hiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Eider Hiver dataset — load_eider_hiver","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_eider_hiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Eider Hiver dataset — load_eider_hiver","text":"","code":"if (FALSE) { # \\dontrun{ processed_eider <- load_eider_hiver() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_garrot.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Garrot dataset — load_garrot","title":"Load and process the Garrot dataset — load_garrot","text":"function loads processes \"Garrot\" dataset predefined external source. validates file columns, applies transformations, standardizes data structure.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_garrot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Garrot dataset — load_garrot","text":"","code":"load_garrot()"},{"path":"http://insileco.io/urgenceAviR/reference/load_garrot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Garrot dataset — load_garrot","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_garrot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Garrot dataset — load_garrot","text":"","code":"if (FALSE) { # \\dontrun{ processed_garrot <- load_garrot() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_macreuse.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Macreuse dataset — load_macreuse","title":"Load and process the Macreuse dataset — load_macreuse","text":"function loads processes \"Macreuse\" dataset predefined external source. validates file columns, applies transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_macreuse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Macreuse dataset — load_macreuse","text":"","code":"load_macreuse()"},{"path":"http://insileco.io/urgenceAviR/reference/load_macreuse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Macreuse dataset — load_macreuse","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_macreuse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Macreuse dataset — load_macreuse","text":"","code":"if (FALSE) { # \\dontrun{ processed_macreuse <- load_macreuse() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_oies.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Oies dataset — load_oies","title":"Load and process the Oies dataset — load_oies","text":"function loads processes \"Oies\" dataset predefined external source. validates file columns, applies transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_oies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Oies dataset — load_oies","text":"","code":"load_oies()"},{"path":"http://insileco.io/urgenceAviR/reference/load_oies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Oies dataset — load_oies","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_oies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Oies dataset — load_oies","text":"","code":"if (FALSE) { # \\dontrun{ processed_oies <- load_oies() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_sauvagine_fleuve.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the Sauvagine Fleuve dataset — load_sauvagine_fleuve","title":"Load and process the Sauvagine Fleuve dataset — load_sauvagine_fleuve","text":"function loads processes \"Sauvagine Fleuve\" dataset predefined external source. validates file columns, applies transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_sauvagine_fleuve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the Sauvagine Fleuve dataset — load_sauvagine_fleuve","text":"","code":"load_sauvagine_fleuve()"},{"path":"http://insileco.io/urgenceAviR/reference/load_sauvagine_fleuve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the Sauvagine Fleuve dataset — load_sauvagine_fleuve","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_sauvagine_fleuve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the Sauvagine Fleuve dataset — load_sauvagine_fleuve","text":"","code":"if (FALSE) { # \\dontrun{ processed_sauvagine_fleuve <- load_sauvagine_fleuve() } # }"},{"path":"http://insileco.io/urgenceAviR/reference/load_somec.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and process the SOMEC dataset — load_somec","title":"Load and process the SOMEC dataset — load_somec","text":"function loads processes \"SOMEC\" dataset predefined external source. validates file columns, applies transformations, integrates species codes using reference table.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_somec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and process the SOMEC dataset — load_somec","text":"","code":"load_somec()"},{"path":"http://insileco.io/urgenceAviR/reference/load_somec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and process the SOMEC dataset — load_somec","text":"processed data.frame standardized columns integrated species codes.","code":""},{"path":"http://insileco.io/urgenceAviR/reference/load_somec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and process the SOMEC dataset — load_somec","text":"","code":"if (FALSE) { # \\dontrun{ processed_somec <- load_somec() } # }"}]
